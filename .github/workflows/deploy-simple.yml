name: Simple Deploy to DigitalOcean

# This workflow is for DigitalOcean App Platform with GitHub integration
# It runs tests and notifies about deployment status

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20.x'

jobs:
  # Run tests on all pushes and PRs
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create test environment file
        run: |
          cat > .env.test <<EOF
          NODE_ENV=test
          DATABASE_URL=postgresql://test:test@localhost:5432/test
          JWT_SECRET=test-jwt-secret-key-for-testing-only
          BCRYPT_ROUNDS=4
          EOF
      
      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
      
      - name: Run type checking
        run: npm run type-check
      
      - name: Run linting
        run: npm run lint
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          DATABASE_URL: postgresql://test:test@localhost:5432/test
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            client/dist
            dist
          retention-days: 7
      
      - name: Test summary
        if: always()
        run: |
          echo "### Test Results ðŸ“Š" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Type Check: ${{ steps.type-check.outcome || 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Linting: ${{ steps.lint.outcome || 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ steps.unit-tests.outcome || 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ steps.integration-tests.outcome || 'success' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ steps.build.outcome || 'success' }}" >> $GITHUB_STEP_SUMMARY

  # Notify about deployment (DigitalOcean handles actual deployment)
  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    steps:
      - name: Get branch name
        id: branch
        run: echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: '${{ steps.branch.outputs.name }}' === 'main' ? 'production' : 'staging',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploying to DigitalOcean App Platform'
            });
            
            return deployment.data.id;
      
      - name: Update deployment status - in progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment triggered on DigitalOcean',
              environment_url: '${{ steps.branch.outputs.name }}' === 'main' 
                ? 'https://evofithealthprotocol.ondigitalocean.app'
                : 'https://evofithealthprotocol-staging.ondigitalocean.app'
            });
      
      - name: Comment on commit
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ steps.branch.outputs.name }}' === 'main' ? 'production' : 'staging';
            const appUrl = '${{ steps.branch.outputs.name }}' === 'main' 
              ? 'https://evofithealthprotocol.ondigitalocean.app'
              : 'https://evofithealthprotocol-staging.ondigitalocean.app';
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `ðŸš€ Deployment to **${environment}** triggered!\n\n` +
                    `DigitalOcean App Platform will handle the deployment automatically.\n\n` +
                    `**Environment:** ${environment}\n` +
                    `**Expected URL:** ${appUrl}\n` +
                    `**Commit:** ${context.sha.substring(0, 7)}\n\n` +
                    `Check the DigitalOcean dashboard for deployment status.`
            });

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit
        run: |
          npm audit --production --audit-level=high || true
          npm audit --production --json > audit-report.json || true
      
      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: audit-report.json
          retention-days: 30
      
      - name: Security summary
        run: |
          echo "### Security Scan Results ðŸ”’" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "npm audit completed. Check artifacts for detailed report." >> $GITHUB_STEP_SUMMARY
